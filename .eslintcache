[{"E:\\WSafar\\wsafar\\src\\index.js":"1","E:\\WSafar\\wsafar\\src\\reportWebVitals.js":"2","E:\\WSafar\\wsafar\\src\\App.js":"3","E:\\WSafar\\wsafar\\src\\utils\\config.js":"4","E:\\WSafar\\wsafar\\src\\context\\auth.js":"5","E:\\WSafar\\wsafar\\src\\view\\layouts\\base-layout.jsx":"6","E:\\WSafar\\wsafar\\src\\routes\\index.jsx":"7","E:\\WSafar\\wsafar\\src\\routes\\private-route.js":"8","E:\\WSafar\\wsafar\\src\\view\\pages\\page404.jsx":"9","E:\\WSafar\\wsafar\\src\\view\\pages\\page500.jsx":"10","E:\\WSafar\\wsafar\\src\\view\\pages\\post-list.jsx":"11","E:\\WSafar\\wsafar\\src\\view\\pages\\login.jsx":"12","E:\\WSafar\\wsafar\\src\\view\\pages\\home.jsx":"13","E:\\WSafar\\wsafar\\src\\utils\\date.js":"14","E:\\WSafar\\wsafar\\src\\api\\index.js":"15"},{"size":478,"mtime":1611417964395,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611407370937,"results":"18","hashOfConfig":"17"},{"size":765,"mtime":1611592224269,"results":"19","hashOfConfig":"17"},{"size":386,"mtime":1618291132967,"results":"20","hashOfConfig":"17"},{"size":168,"mtime":1611513921565,"results":"21","hashOfConfig":"17"},{"size":750,"mtime":1611594806213,"results":"22","hashOfConfig":"17"},{"size":809,"mtime":1611517417526,"results":"23","hashOfConfig":"17"},{"size":607,"mtime":1618291674897,"results":"24","hashOfConfig":"17"},{"size":441,"mtime":1611594375939,"results":"25","hashOfConfig":"17"},{"size":455,"mtime":1611594515413,"results":"26","hashOfConfig":"17"},{"size":8771,"mtime":1611601675662,"results":"27","hashOfConfig":"17"},{"size":2553,"mtime":1618291183405,"results":"28","hashOfConfig":"17"},{"size":1482,"mtime":1618291208565,"results":"29","hashOfConfig":"17"},{"size":330,"mtime":1611601572399,"results":"30","hashOfConfig":"17"},{"size":1627,"mtime":1611561491524,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1t0bozt",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"64"},"E:\\WSafar\\wsafar\\src\\index.js",[],["65","66"],"E:\\WSafar\\wsafar\\src\\reportWebVitals.js",[],"E:\\WSafar\\wsafar\\src\\App.js",[],"E:\\WSafar\\wsafar\\src\\utils\\config.js",[],"E:\\WSafar\\wsafar\\src\\context\\auth.js",[],"E:\\WSafar\\wsafar\\src\\view\\layouts\\base-layout.jsx",[],"E:\\WSafar\\wsafar\\src\\routes\\index.jsx",[],"E:\\WSafar\\wsafar\\src\\routes\\private-route.js",[],"E:\\WSafar\\wsafar\\src\\view\\pages\\page404.jsx",[],"E:\\WSafar\\wsafar\\src\\view\\pages\\page500.jsx",[],"E:\\WSafar\\wsafar\\src\\view\\pages\\post-list.jsx",["67","68","69"],"import React, { useState, useEffect } from \"react\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport { Row, Col, Space, Input, Button, Badge, Table, Pagination } from \"antd\";\r\nimport Highlighter from \"react-highlight-words\";\r\nimport { useAuth } from \"../../context/auth\";\r\nimport Service from \"../../api\";\r\nimport convertDateToJalali from \"../../utils/date\";\r\n\r\nconst PostList = (props) => {\r\n  // auth config\r\n  const { setAuthToken } = useAuth();\r\n\r\n  const logOut = () => {\r\n    setAuthToken();\r\n    localStorage.removeItem(\"TOKEN\");\r\n    window.location = \"/\";\r\n  };\r\n  // auth config end\r\n\r\n  // search config\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [searchedColumn, setSearchedColumn] = useState(\"\");\r\n  let searchInput = null;\r\n\r\n  const getColumnSearchProps = (dataIndex, dataIndexTitle) => ({\r\n    filterDropdown: ({\r\n      setSelectedKeys,\r\n      selectedKeys,\r\n      confirm,\r\n      clearFilters,\r\n    }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={(node) => {\r\n            searchInput = node;\r\n          }}\r\n          placeholder={`جستجو در ${dataIndexTitle}`}\r\n          value={selectedKeys[0]}\r\n          onChange={(e) =>\r\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n          }\r\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: \"block\" }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            جستجو\r\n          </Button>\r\n          <Button\r\n            onClick={() => handleReset(clearFilters, confirm, dataIndex)}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            پاک کردن\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered) => (\r\n      <SearchOutlined style={{ color: filtered ? \"#921349\" : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase())\r\n        : \"\",\r\n    onFilterDropdownVisibleChange: (visible) => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: (text) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : \"\"}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    setSearchText(selectedKeys[0]);\r\n\t\tsetSearchedColumn(dataIndex);\r\n\t\t\r\n\t\t// search text\r\n\t\tlet params;\r\n    if (selectedKeys.length > 0) {\r\n      params = createParams(`filter[${dataIndex}]`, selectedKeys[0]);\r\n    } else {\r\n      params = removeParams(`filter[${dataIndex}]`);\r\n\t\t}\r\n\r\n\t\tconfirm();\r\n  };\r\n\r\n  const handleReset = (clearFilters, confirm, dataIndex) => {\r\n    clearFilters();\r\n\t\tsetSearchText(\"\");\r\n\r\n\t\tlet params = removeParams(`filter[${dataIndex}]`);\r\n\t\tconfirm();\r\n  };\r\n  // search config end\r\n\r\n  // load post list\r\n  const [loading, setLoading] = useState(false);\r\n  const [postList, setPostList] = useState([]);\r\n  const [metaInfo, setMetaInfo] = useState({\r\n    currentPage: 0,\r\n    pageCount: 0,\r\n    perPage: 20,\r\n    totalCount: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const params = createParams();\r\n    getPostList(params);\r\n  }, []);\r\n\r\n  const getParamsFromUrl = () => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const entries = urlParams.entries();\r\n    const paramsObj = {};\r\n    for (const entry of entries) {\r\n      paramsObj[entry[0]] = entry[1];\r\n    }\r\n    return paramsObj;\r\n  };\r\n\r\n  const createParams = (paramKey, paramValue) => {\r\n    const { history } = props;\r\n    let paramsObj = getParamsFromUrl();\r\n\r\n    if (metaInfo.currentPage === 0) {\r\n      paramsObj[\"page\"] = \"1\";\r\n    } else {\r\n      paramsObj[\"page\"] = paramKey === \"page\" ? paramValue : \"1\";\r\n    }\r\n\r\n    paramsObj[paramKey] = paramValue;\r\n\r\n    let params = \"?\";\r\n    for (const item of Object.keys(paramsObj)) {\r\n      if (paramsObj[item]) params += `${item}=${paramsObj[item]}&`;\r\n    }\r\n    params = params.slice(0, -1);\r\n    history.push({ search: params });\r\n    return params;\r\n  };\r\n\r\n  const removeParams = (paramKey) => {\r\n    const { history } = props;\r\n    let paramsObj = getParamsFromUrl();\r\n    let params = \"?\";\r\n    for (const item of Object.keys(paramsObj)) {\r\n      if (paramsObj[item] && item !== paramKey)\r\n        params += `${item}=${paramsObj[item]}&`;\r\n    }\r\n    params = params.slice(0, -1);\r\n    history.push({ search: params });\r\n    return params;\r\n  };\r\n\r\n  const getPostList = (params) => {\r\n    setLoading(true);\r\n    let _params = params || \"\";\r\n    Service.getPosts(_params)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          const data = res.data.result;\r\n          setLoading(false);\r\n          setPostList(data.items);\r\n          setMetaInfo(data._meta);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n\t// sort & filter\r\n  const onChangeTable = (pagination, filters, sorter, extra) => {\r\n    let params;\r\n\r\n    // filter\r\n    if (filters?.status !== null && filters?.status.length > 0) {\r\n      params = createParams(\"filter[status]\", filters.status[0].toString());\r\n    } else {\r\n      params = removeParams(\"filter[status]\");\r\n    }\r\n\r\n    // sort\r\n    if (sorter?.column !== undefined) {\r\n      let sortValue = (sorter.order === \"descend\" ? \"-\" : \"\") + sorter.field;\r\n      params = createParams(\"sort\", sortValue);\r\n    } else {\r\n      params = removeParams(\"sort\");\r\n\t\t}\r\n\t\t\r\n    getPostList(params);\r\n  };\r\n\r\n  const onChangePagination = (page, pageSize) => {\r\n    let params = createParams(\"page\", page);\r\n    getPostList(params);\r\n  };\r\n  // load post list end\r\n\r\n  const columns = [\r\n    {\r\n      title: \"عنوان\",\r\n      dataIndex: \"title\",\r\n      align: \"center\",\r\n      sorter: true,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n      ...getColumnSearchProps(\"title\", \"عنوان\"),\r\n    },\r\n    {\r\n      title: \"توضیحات\",\r\n      dataIndex: \"content\",\r\n      align: \"center\",\r\n      sorter: true,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n      ...getColumnSearchProps(\"content\", \"توضیحات\"),\r\n    },\r\n    {\r\n      title: \"وضعیت\",\r\n      dataIndex: \"status\",\r\n      align: \"center\",\r\n      render: (status) => (\r\n        <span>\r\n          <Badge status={status ? \"success\" : \"error\"} />\r\n        </span>\r\n      ),\r\n      filters: [\r\n        {\r\n          text: \"فعال\",\r\n          value: 1,\r\n        },\r\n        {\r\n          text: \"غیر فعال\",\r\n          value: 0,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      sorter: true,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n    },\r\n    {\r\n      title: \"تاریخ ایجاد\",\r\n      dataIndex: \"created_at\",\r\n      align: \"center\",\r\n      className: \"ltrDir\",\r\n      render: (created_at) => (created_at ? convertDateToJalali(created_at) : \"-\"),\r\n      sorter: true,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n    },\r\n    {\r\n      title: \"تاریخ بروز رسانی\",\r\n      dataIndex: \"updated_at\",\r\n      align: \"center\",\r\n      className: \"ltrDir\",\r\n      render: (updated_at) => (updated_at ? convertDateToJalali(updated_at) : \"-\"),\r\n      sorter: true,\r\n      sortDirections: [\"descend\", \"ascend\"],\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col span={24} style={{ textAlign: \"center\" }}>\r\n          <Table\r\n            bordered\r\n            align=\"center\"\r\n            rowKey=\"id\"\r\n            columns={columns}\r\n            loading={loading}\r\n            pagination={false}\r\n            dataSource={postList}\r\n            onChange={onChangeTable}\r\n          />\r\n\r\n          {!loading && (\r\n            <Pagination\r\n              style={{ padding: \"20px 0 50px\" }}\r\n              size=\"small\"\r\n              showSizeChanger={false}\r\n              current={metaInfo.currentPage}\r\n              pageSize={metaInfo.perPage}\r\n              total={metaInfo.totalCount}\r\n              onChange={onChangePagination}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Row justify=\"end\">\r\n        <Col>\r\n          {!loading && <Button onClick={logOut}>خروج</Button>}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostList;","E:\\WSafar\\wsafar\\src\\view\\pages\\login.jsx",[],"E:\\WSafar\\wsafar\\src\\view\\pages\\home.jsx",[],"E:\\WSafar\\wsafar\\src\\utils\\date.js",[],"E:\\WSafar\\wsafar\\src\\api\\index.js",["70"],"import axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nclass Service {\r\n\tconstructor() {\r\n\r\n\t\tlet service = axios.create({\r\n\t\t\tbaseURL: process.env.REACT_APP_API_URL,\r\n\t\t\ttimeout: 30000,\r\n\t\t\theaders: {\r\n\t\t\t\tcommon: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\taxiosRetry(service, {\r\n\t\t\tretries: 2,\r\n\t\t\tretryDelay: axiosRetry.exponentialDelay\r\n\t\t});\r\n\r\n\t\tservice.interceptors.request.use(\r\n\t\t\tconfig => {\r\n\t\t\t\tconfig.headers.Authorization = localStorage.getItem(\"TOKEN\");\r\n\t\t\t\treturn config;\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tservice.interceptors.response.use(\r\n\t\t\tresponse => {\r\n\t\t\t\treturn response;\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tif (error.response.status === 401) {\r\n\t\t\t\t\tlocalStorage.removeItem(\"TOKEN\");\r\n\t\t\t\t\twindow.location = \"/login\";\r\n\t\t\t\t\treturn Promise.reject(false);\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tthis.service = service;\r\n\t}\r\n\r\n\r\n\tloginRequest = (data) => {\r\n\t\tlet url = 'users/login';\r\n\t\treturn this.service.post(url, data)\r\n\t\t\t.then(res => {\r\n\t\t\t\treturn res;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err, \"err\");\r\n\t\t\t})\r\n\t}\r\n\r\n\tlogoutRequest = () => {\r\n\t\tlet url = 'users/logout';\r\n\t\treturn this.service.delete(url)\r\n\t\t\t.then(res => {\r\n\t\t\t\treturn res;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err, \"err\");\r\n\t\t\t})\r\n\t}\r\n\r\n\tgetPosts = (param) => {\r\n\t\tlet url = param ? `posts${param}` : `posts`;\r\n\t\treturn this.service.get(url)\r\n\t\t\t.then(res => {\r\n\t\t\t\treturn res;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err, \"err\");\r\n\t\t\t})\r\n\t}\r\n\t\r\n}\r\n\r\nexport default new Service;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":102,"column":7,"nodeType":"77","messageId":"78","endLine":102,"endColumn":13},{"ruleId":"75","severity":1,"message":"76","line":112,"column":7,"nodeType":"77","messageId":"78","endLine":112,"endColumn":13},{"ruleId":"79","severity":1,"message":"80","line":130,"column":6,"nodeType":"81","endLine":130,"endColumn":8,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":87,"column":16,"nodeType":"85","messageId":"86","endLine":87,"endColumn":27,"fix":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'params' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createParams'. Either include it or remove the dependency array.","ArrayExpression",["90"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"91","text":"92"},"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},[1626,1626],"()","Update the dependencies array to be: [createParams]",{"range":"95","text":"96"},[3704,3706],"[createParams]"]